import { Activity, EventActivity, GatewayActivity, Sequence, TaskActivity, WrappedElement } from './core';
import { BPMNDefinition, BPMNProcess } from './type';
import { IdentityOptions } from './common';
/**
 * It takes a BPMN definition and an identity object, and returns the process that matches the identity
 *
 * @param {BPMNDefinition} definition - The BPMN definition object.
 * @param {IdentityOptions} identity - IdentityOptions
 *
 * @returns A BPMNProcess
 */
export declare const getBPMNProcess: (definition: BPMNDefinition, identity: IdentityOptions) => BPMNProcess | undefined;
/**
 * It returns the element object from the BPMN process object
 *
 * @param {BPMNProcess} process - The BPMNProcess object
 * @param {IdentityOptions} identity - IdentityOptions
 * @param options - cache: boolean = cache: true
 *
 * @returns An object with a key and element.
 */
export declare const getWrappedBPMNElement: (process: BPMNProcess, identity: IdentityOptions) => WrappedElement | undefined;
/**
 * It takes a BPMNProcess and an optional data object, and returns an Activity
 *
 * @param {BPMNProcess} process - The BPMNProcess object that contains the activity.
 * @param [options] - key: string; element: BPMNElement
 *
 * @returns A new Activity object
 */
export declare const getActivity: (process: BPMNProcess, data?: WrappedElement) => Activity | TaskActivity | EventActivity | GatewayActivity;
/**
 * It takes a list of outgoing sequences and an optional identity, and returns a list of target
 * references
 *
 * @param {Sequence[]} outgoing - Sequence[] - the outgoing sequence array
 * @param {IdentityOptions} [identity] - IdentityOptions
 *
 * @returns The function takes in a sequence and an identity. If the identity is defined, it will
 * filter the sequence by the id or name of the identity. If the identity is not defined, it will
 * return the sequence.
 */
export declare const takeOutgoing: (outgoing: Sequence[], identity?: IdentityOptions) => Activity[] | undefined;
/**
 * This TypeScript function returns the 'id' property of an object if it exists, otherwise it returns
 * the 'name' property.
 *
 * @param {IdentityOptions} identity - The parameter `identity` is of type `IdentityOptions`, which is
 * an interface or type that defines two possible properties: `id` and `name`.
 */
export declare const getKey: (identity: IdentityOptions) => string;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const utils_1 = require("../utils");
const log = (0, utils_1.logger)('container');
/* It's a container for BPMN definitions and elements */
class Container {
    /**
     * It adds an element to the elements object
     *
     * @param {string} id - string - The id of the process
     * @param data - element: BPMNElement; key: string
     */
    static addElement(id, data) {
        var _a;
        Container.elements[id] = (_a = Container.elements[id]) !== null && _a !== void 0 ? _a : {};
        const $ = data.element.$;
        Container.elements[id][$.id] = data;
        if ($.name)
            Container.elements[id][$.name] = data;
        log.info(`Process ${id} element ${$.id} added to the container`);
    }
    /**
     * If the identity object has an id property, return the element with that id, otherwise if it has a
     * name property, return the element with that name
     *
     * @param {string} id - The ID of the process.
     * @param {IdentityOptions} identity - IdentityOptions of element
     *
     * @returns The element of the user with the given identity.
     */
    static getElement(id, identity) {
        var _a;
        const key = 'id' in identity ? identity.id : identity.name;
        const value = ((_a = Container.elements[id]) !== null && _a !== void 0 ? _a : {})[key];
        if (value)
            log.hit(`Getting process ${id} element identity ${key}`);
        else
            log.miss(`Getting process ${id} element identity ${key}`);
        return value;
    }
    /**
     * It deletes an element from the elements object
     *
     * @param {string} id - The ID of the process.
     * @param {IdentityOptions} identity - IdentityOptions of element
     */
    static delElement(id, identity) {
        var _a, _b;
        if (identity) {
            if ('id' in identity)
                delete ((_a = Container.elements[id]) !== null && _a !== void 0 ? _a : {})[identity.id];
            else if ('name' in identity)
                delete ((_b = Container.elements[id]) !== null && _b !== void 0 ? _b : {})[identity.name];
        }
        else
            delete Container.elements[id];
        const key = identity && 'id' in identity ? identity.id : identity === null || identity === void 0 ? void 0 : identity.name;
        log.info(`Process ${id} element identity ${key !== null && key !== void 0 ? key : id} deleted from the container`);
    }
    /**
     * It adds a new BPMN definition to the definitions object
     *
     * @param {string} id - The id of the BPMN definition.
     * @param {BPMNDefinition} definition - BPMNDefinition
     */
    static addDefinition(id, definition) {
        Container.definitions[id] = definition;
        log.info(`Definition ${id} added to the container`);
    }
    /**
     * It returns the definition of the given id
     *
     * @param {string} id - The id of the definition to get.
     *
     * @returns The definition of the id.
     */
    static getDefinition(id) {
        return Container.definitions[id];
    }
    /**
     * It deletes the definition of the given id from the definitions object
     *
     * @param {string} id - The id of the definition.
     */
    static delDefinition(id) {
        delete Container.definitions[id];
        log.info(`Definition ${id} deleted from the container`);
    }
}
exports.Container = Container;
Container.elements = {};
Container.definitions = {};
//# sourceMappingURL=container.js.map
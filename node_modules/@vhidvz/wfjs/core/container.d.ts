import { BPMNDefinition, BPMNElement } from '../type';
import { IdentityOptions } from '../common';
export interface DefinitionContainer {
    [id: string]: BPMNDefinition;
}
export interface WrappedElement {
    element: BPMNElement;
    key: string;
}
export interface ElementContainer {
    [id: string]: {
        [id: string]: WrappedElement;
    };
}
export declare class Container {
    private static elements;
    private static definitions;
    /**
     * It adds an element to the elements object
     *
     * @param {string} id - string - The id of the process
     * @param data - element: BPMNElement; key: string
     */
    static addElement(id: string, data: WrappedElement): void;
    /**
     * If the identity object has an id property, return the element with that id, otherwise if it has a
     * name property, return the element with that name
     *
     * @param {string} id - The ID of the process.
     * @param {IdentityOptions} identity - IdentityOptions of element
     *
     * @returns The element of the user with the given identity.
     */
    static getElement(id: string, identity: IdentityOptions): WrappedElement;
    /**
     * It deletes an element from the elements object
     *
     * @param {string} id - The ID of the process.
     * @param {IdentityOptions} identity - IdentityOptions of element
     */
    static delElement(id: string, identity?: IdentityOptions): void;
    /**
     * It adds a new BPMN definition to the definitions object
     *
     * @param {string} id - The id of the BPMN definition.
     * @param {BPMNDefinition} definition - BPMNDefinition
     */
    static addDefinition(id: string, definition: BPMNDefinition): void;
    /**
     * It returns the definition of the given id
     *
     * @param {string} id - The id of the definition to get.
     *
     * @returns The definition of the id.
     */
    static getDefinition(id: string): BPMNDefinition;
    /**
     * It deletes the definition of the given id from the definitions object
     *
     * @param {string} id - The id of the definition.
     */
    static delDefinition(id: string): void;
}
